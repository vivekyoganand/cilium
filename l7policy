# complete-l7-policy.yaml
---
# API Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
      - name: api-server
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: api-nginx-config
---
# API Server Service
apiVersion: v1
kind: Service
metadata:
  name: api-server
spec:
  selector:
    app: api-server
  ports:
  - port: 80
    targetPort: 80
---
# Web Client Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-client
  template:
    metadata:
      labels:
        app: web-client
    spec:
      containers:
      - name: web-client
        image: curlimages/curl
        command: ["sleep", "infinity"]
---
# ConfigMap for API Server nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-nginx-config
data:
  nginx.conf: |
    events {
      worker_connections  1024;
    }
    http {
      server {
        listen 80;
        
        location /api/v1/users {
          return 200 '{"message": "Users API response"}\n';
          add_header Content-Type application/json;
        }
        
        location /api/v1/create {
          if ($http_x_auth_token = "") {
            return 401 '{"error": "No auth token provided"}\n';
          }
          return 200 '{"message": "Resource created"}\n';
          add_header Content-Type application/json;
        }
      }
    }
---
# Cilium L7 HTTP Policy
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: "l7-http-rule"
spec:
  endpointSelector:
    matchLabels:
      app: api-server
  ingress:
  - fromEndpoints:
    - matchLabels:
        app: web-client
    toPorts:
    - ports:
      - port: "80"
        protocol: TCP
      rules:
        http:
        - method: "GET"
          path: "/api/v1/users"
        - method: "POST"
          path: "/api/v1/create"
          headers:
          - 'X-Auth-Token: ".*"'



kubectl delete deployment api-server web-client
kubectl delete service api-server
kubectl delete configmap api-nginx-config
kubectl delete ciliumnetworkpolicy l7-http-rule

kubectl apply -f complete-l7-policy.yaml

kubectl get deployments
kubectl get pods
kubectl get services
kubectl get ciliumnetworkpolicies

# Test GET /api/v1/users (should succeed)
kubectl exec -it $(kubectl get pod -l app=web-client -o jsonpath='{.items[0].metadata.name}') -- \
  curl -v api-server/api/v1/users

# Test POST /api/v1/create with auth token (should succeed)
kubectl exec -it $(kubectl get pod -l app=web-client -o jsonpath='{.items[0].metadata.name}') -- \
  curl -X POST -H "X-Auth-Token: secret123" api-server/api/v1/create

# Test GET /api/v2/users (should fail)
kubectl exec -it $(kubectl get pod -l app=web-client -o jsonpath='{.items[0].metadata.name}') -- \
  curl -v api-server/api/v2/users

# Test POST without auth token (should fail)
kubectl exec -it $(kubectl get pod -l app=web-client -o jsonpath='{.items[0].metadata.name}') -- \
  curl -X POST api-server/api/v1/create

# Monitor L7 HTTP traffic
cilium monitor --type l7

# Check policy status
cilium policy get l7-http-rule

# Check pod logs
kubectl logs -l app=api-server
kubectl logs -l app=web-client

# Describe pods
kubectl describe pod -l app=api-server
kubectl describe pod -l app=web-client

# Check endpoints
kubectl get endpoints api-server
