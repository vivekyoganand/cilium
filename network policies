# Delete existing resources
kubectl delete deployment frontend backend
kubectl delete service frontend-service backend-service
kubectl delete configmap nginx-config
kubectl delete ciliumnetworkpolicy basic-policy

# complete-app.yaml
---
# Nginx ConfigMap for Backend
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {
      worker_connections  1024;
    }
    http {
      server {
        listen 8080;
        location / {
          return 200 'Hello from backend\n';
        }
      }
    }
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nginx
        ports:
        - containerPort: 80
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: nginx
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
  - port: 8080
    targetPort: 8080
---
# Cilium Network Policy
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: "basic-policy"
spec:
  endpointSelector:
    matchLabels:
      app: backend
  ingress:
  - fromEndpoints:
    - matchLabels:
        app: frontend
    toPorts:
    - ports:
      - port: "8080"
        protocol: TCP

# 1. Delete all existing resources
kubectl delete deployment frontend backend
kubectl delete service frontend-service backend-service
kubectl delete configmap nginx-config
kubectl delete ciliumnetworkpolicy basic-policy

# 2. Wait for resources to be deleted
kubectl wait --for=delete deployment/frontend deployment/backend --timeout=60s
kubectl wait --for=delete service/frontend-service service/backend-service --timeout=60s

# 3. Apply the new configuration
kubectl apply -f complete-app.yaml

# 4. Wait for deployments to be ready
kubectl wait --for=condition=available deployment/frontend deployment/backend --timeout=60s

# 5. Verify all resources
kubectl get all
kubectl get configmap nginx-config
kubectl get ciliumnetworkpolicy basic-policy

# 6. Check pods are running
kubectl get pods -o wide

# 7. Verify services
kubectl get services

# 8. Test connectivity
kubectl exec -it $(kubectl get pod -l app=frontend -o jsonpath='{.items[0].metadata.name}') -- curl backend-service:8080


Verify 
==
# Check pod status
kubectl get pods -o wide

# Check services
kubectl get services

# Check endpoints
kubectl get endpoints

# Check network policy
kubectl get ciliumnetworkpolicy

# Check configmap
kubectl get configmap nginx-config

# Check logs
kubectl logs -l app=backend
kubectl logs -l app=frontend

# Check policy status
cilium policy get

Troubleshooting 
==
# Check pod details
kubectl describe pod $(kubectl get pod -l app=backend -o jsonpath='{.items[0].metadata.name}')
kubectl describe pod $(kubectl get pod -l app=frontend -o jsonpath='{.items[0].metadata.name}')

# Check service details
kubectl describe service backend-service
kubectl describe service frontend-service

# Monitor policy verdicts
cilium monitor --type policy-verdict

# Check Cilium status
cilium status --all

# Test network connectivity
kubectl exec -it $(kubectl get pod -l app=frontend -o jsonpath='{.items[0].metadata.name}') -- curl -v backend-service:8080

